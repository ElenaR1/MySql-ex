--9-15 april

--1-- Да се добави информация за актрисата Nicole
-- Kidman. За нея знаем само, че е родена на
-- 20-и юни 1967.
insert into moviestar(name, gender, birthdate)
values('Nicole Kidman', 'F', '1967-06-20');

-- трябва да проверим какво е станало, например:
select * from moviestar;
delete from MOVIESTAR where name='Nicole Kidman'
select * from moviestar;


--2-- Да се изтрият всички продуценти с печалба
-- (networth) под 10 милиона.
select * from MOVIEEXEC;
delete from MOVIEEXEC where NETWORTH < 1000000--0 rows affected
select * from MOVIEEXEC;

--<112 000 000 mahat se tezi < 112 000 000
select * from MOVIEEXEC;
delete from MOVIEEXEC where NETWORTH < 112000000--0 rows affected
select * from MOVIEEXEC;


--3-- Да се изтрие информацията за всички филмови
-- звезди, за които адресът е неизвестен.

begin transaction; -- изпълняваме този ред (F5)
-- пишем си заявките и си ги изпълняваме по познатия начин (F5, F5...)
delete from MOVIESTAR
where address is null;
-- накрая пишем:
rollback transaction;

--PRIMER
select * from MOVIESTAR;--natiskam go predi i sled kaato delete-na imeto kakto i sled rollback transaction
begin transaction; -- изпълняваме този ред (F5)
-- пишем си заявките и си ги изпълняваме по познатия начин (F5, F5...)
delete from MOVIESTAR
where name='Jane Fonda'
-- накрая пишем:
rollback transaction;--F5 vuzstanovqva si go kakto e bilo

--4
-- Използвайки две INSERT заявки, съхранете в базата от
-- данни факта, че персонален компютър модел 1100 е
-- направен от производител C, има процесор 2400 MHz,
-- RAM 2048 MB, твърд диск 500 GB, 52x DVD устройство и струва $299. 
-- Нека новият компютър има код 12. Забележка: моделът и CD са от тип
-- низ.
-- Упътване: самото вмъкване на данни е очевидно как ще стане,
-- помислете в какъв ред е по-логично да са двете заявки.
select * from product,pc order by maker 
begin transaction; 
insert into product(maker,model,type)
values('C', '1100', 'PC');
insert into pc(code, model, speed, ram, hd, cd, price)
VALUES(12, '1100', 2400, 2048, 500, '52x', 299);
--rollback transaction;
--select * from product,pc order by maker 

--5 -- Да се изтрие всичката налична информация за компютри модел 1100.
select * from pc order by model
select * from product order by model
delete from pc where model='1100';
delete from product where model='1100';

--6-- За всеки персонален компютър се продава и 15-инчов лаптоп със същите параметри,
-- но с $500 по-скъп. Кодът на такъв лаптоп е със 100 по-голям от кода на съответния
-- компютър. Добавете тази информация в базата.
select * from product order by model
select * from product order by maker
begin transaction; 
insert into product (model, maker, type)
select distinct model, 'Z', 'Laptop' from pc;--distinct model shte nareche model razlichen ot tezi na laptopite dosega
rollback transaction;

select * from laptop
begin transaction; 
insert into laptop(code, model, speed, ram, hd, price, screen)
select code+100, model, speed, ram, hd, price+500, 15
from pc;
rollback transaction;

--7-- Да се изтрият всички лаптопи, направени от производител, който не
-- произвежда принтери.
-- Упътване: Мислете си, че решавате задача от познат тип - "Да се
-- изведат всички лаптопи, ...". Накрая ще е нужна съвсем малка
-- промяна. Ако започнете директно да триете, много е вероятно при
-- някой грешен опит да изтриете всички лаптопи и ще трябва често да
-- възстановявате таблицата или да работите на сляпо.
--pokazva laptopite chiito proizvedtiel ne e i proizveditel na printer-tehnite kodove sa 2 i 3
select * from laptop l 
where l.model in (select model from product where type='Laptop'
  and maker not in (select maker from product where type='Printer'))

begin transaction; 
delete from laptop
where model in(select model from product where type='Laptop'
 and maker not in (select maker from product where type='Printer'))
 rollback transaction;

 select * from laptop



 --8-- Производител А купува производител B. На всички продукти на В
-- променете производителя да бъде А.

delete from product where maker='Z'

select * from product order by maker
begin transaction; 
update product
set maker= 'A' where maker= 'B'
rollback transaction;

--9-- Да се намали два пъти цената на всеки компютър и да се добавят по
-- 20 GB към всеки твърд диск. Упътване: няма нужда от две отделни заявки.
select * from pc
begin transaction; 
update pc
set price=price/2,hd=hd+20
rollback transaction;


--10-- За всеки лаптоп от производител B добавете по един инч към диагонала
-- на екрана.
--laptopi chiito maker-i sa B
select * from laptop where model in (select model from PRODUCT where maker='B')

begin transaction; 
update laptop
set screen=screen+1 where model in (select model from PRODUCT where maker='B')
rollback transaction;


--11-- Два британски бойни кораба от класа Nelson - Nelson и Rodney - са
-- били пуснати на вода едновременно през 1927 г. Имали са девет
-- 16-инчови оръдия (bore) и водоизместимост от 34 000 тона (displacement).
-- Добавете тези факти към базата от данни.
select *from ships s
join classes c on c.CLASS=s.CLASS
begin transaction;
insert into classes
values('Nelson', 'bb', 'Gt.Britain', 9, 16, 34000);

insert into ships
values('Nelson', 'Nelson', 1927);

insert into ships
values('Rodney', 'Nelson', 1927);

rollback transaction;


--12-- Изтрийте от Ships всички кораби, които са потънали в битка.
select * from ships s
join OUTCOMES o on s.NAME=o.SHIP
begin transaction;
delete from ships
where name in (select ship from OUTCOMES where result='sunk')
rollback transaction;


--13-- Променете данните в релацията Classes така, че калибърът (bore) да се измерва
-- в сантиметри (в момента е в инчове, 1 инч ~ 2.5 см) и водоизместимостта
-- да се измерва в метрични тонове (1 м.т. = 1.1 т.)
select * from CLASSES
begin transaction;
update classes
set bore=bore*2.54, displacement=displacement/1.1;
rollback transaction;


--14-- Изтрийте всички класове, от които има по-малко от три кораба.
-- заб.: може да има класове без кораби
select * from ships

select class ,count(*)
from ships
group by CLASS

select class ,count(*)
from ships
group by CLASS
having count(*)>3

--pokazva broevete na klasovete
select class,count(*)
from CLASSES
group by CLASS

--zadachata
begin transaction;
delete from classes
where class NOT in
(select class
from ships
group by class
having count(*) >= 3);
rollback transaction;

delete from classes where class in
(select classes.class 
from classes
left join ships on classes.class=ships.class
group by classes.class
having count(name)<3);


--15-- Променете калибъра на оръдията и водоизместимостта на класа 
--Iowa, така че да са същите като тези на класа Bismarck
select *from classes 

begin transaction;
update CLASSES
set bore=(select bore from CLASSES where class='Bismarck'),
DISPLACEMENT=(select DISPLACEMENT from CLASSES where class='Bismarck') where class ='Iowa'
rollback transaction;




-------16-22
Създайте нова база от данни, например "test".
В MS SQL Server това може да се направи така:

CREATE DATABASE test
GO
USE test
GO
1. Дефинирайте следните релации:
а) Product(maker, model, type), където моделът е низ от точно 4 символа, maker - един символ, а type - низ до 7 символа;
б) Printer(code, model, color, price), където code е цяло число, color е 'y' или 'n' и по подразбиране е 'n', price - цена с точност до два знака след десетичната запетая;
в) Classes(class, type), където class е до 50 символа, а type може да бъде 'bb' или 'bc'.
 create table product(
 maker char(1),
 model char(4), 
 type varchar(7));

 create table printer(
 code int ,
 model char(4),
 color char(1) default 'n', 
 price decimal(10,2));

 --float(M,D) this keeping in mind here M=max. no. of digit allowed(range 1 to 65), D=no. of digits after 
 --the decimal point. so cany you change it float(5,2). so float(2,2) does not satisfiy your need to enter no.10

 create table classes(
 class varchar(50),
 type char(2)
 );

 --2 Добавете кортежи с примерни данни към новосъздадените релации. Добавете информация за принтер, за когото знаем само кода и модела.
  insert into Printer(code,model) 
  values(10,'1234');
  SELECT * FROM PRINTER

   insert into product
  values('A','1234','printer');
    SELECT * FROM product
	
   insert into classes
  values('Item','bb');
    SELECT * FROM classes


 --3 Добавете към Classes атрибут bore - число с плаваща запетая.
 alter table classes add bore float
 SELECT * FROM classes
--4Напишете заявка, която премахва атрибута price от Printer.
alter table printer drop column price

--5 Изтрийте всички таблици, които сте създали в това упражнение.

DROP TABLE classes;
DROP TABLE printer;
DROP TABLE product;


--6Накрая изтрийте и самата база. За целта трябва да укажем друга база да бъде текуща, понеже не можем да изтрием текущата база.
USE master
GO
DROP DATABASE test
GO



------- 23-29 april

create database deleteme
go
use deleteme
go
-- допълнение към материала: autoincrementing primary key
create table test1
(
	id int identity primary key,
	name nvarchar(50)
);

insert into test1(name) values('Test'); -- даваме стойност за всички колони, но без id
insert into test1(name) values('Second Test');
select * from test1;

delete from test1 where id = 2;
insert into test1(name) values('Third Test');--id-tata veche sa 1 i 3
select * from test1;

--1
--a Да се направи така, че да не може два филма да имат еднаква дължина.
alter table movie
add constraint unique_length unique(length);

select * from movie--empire stikes back e 11 minuti
-- б) Да се направи така, че да не може едно студио да има два филма с еднаква дължина
alter table movie
add constraint u2 unique(studioName, length);

insert into movie(title, year, length, incolor, studioName, producerc#)
values('Fail', 2012, 111, 'N', 'Fox', 123);
-- горната заявка няма да тръгне, ако вече има филм на Фокс с дължина 111 минути

-- Зад. 2. Изтрийте ограниченията от първа задача от Movie.
alter table movie
drop constraint u2;

delete from movie
where title='Fail'

--3
а) За всеки студент се съхранява следната информация:
-- фак. номер - от 0 до 99999, първичен ключ;
-- име - до 100 символа;
-- ЕГН - точно 10 символа, уникално;
-- e-mail - до 100 символа, уникален;
-- рождена дата;
-- дата на приемане в университета - трябва да бъде поне 18 години след рождената;
-- за всички атрибути задължително трябва да има зададена стойност (не може NULL)
create table students
(
	fn int primary key check (fn between 0 and 99999),
	name nvarchar(100) not null, -- допълнителен материал: в MSSQL се използва NVARCHAR за поддръжка на UNICODE символи
	ssn char(10) unique not null,
	email varchar(100) unique not null,
	birthdate date not null,
	adate date not null,
	constraint at_least_18_yrs check(datediff(year, birthdate, adate) >= 18)
);
--TIMESTAMPDIFF(unit,datetime_expr1,datetime_expr2)-Returns datetime_expr2 – datetime_expr.The unit for the result (an integer) is given by the unit argument.
--The unit argument can be:  MICROSECOND (microseconds), SECOND, MINUTE, HOUR, DAY, WEEK, MONTH, QUARTER, or YEAR.

insert into students
values(81888, 'Ivan Ivanov', '9001012222', 'ivan@gmail.com', '1990-01-01', '2009-01-10');
select * from students;

insert into students
values(81888, 'Petar Petrov', '9033012222', 'petar@gmail.com', '1990-01-01', '2003-01-10');--ne stava t.k godinite < 18

--NE STAVA TAKA, T.K Column CHECK constraint for column 'adate' references another column, table 'students2'.
create table students2
(
	fn int primary key check (fn between 0 and 99999),
	name nvarchar(100) not null, -- допълнителен материал: в MSSQL се използва NVARCHAR за поддръжка на UNICODE символи
	ssn char(10) unique not null,
	email varchar(100) unique not null,
	birthdate date not null,
	adate date not null check(datediff(year, birthdate, adate) >= 18),
	--constraint at_least_18_yrs check(datediff(year, birthdate, adate) >= 18)
);

--% - The percent sign represents zero, one, or multiple characters- A WILDCARD
-- _ - The underscore represents a single character
select * from students;
-- б) добавете валидация за e-mail адреса - да бъде във формат <нещо>@<нещо>.<нещо>
alter table students
add constraint email_valid check(email like '%_@%_.%_');--polzvame _ za da ima e pone 3 znaka e.g a@b.c
-- ima pone 3 bukvi sled dadenite znaci, a ne moje alpha@beta. i da nqma nishto sled .
--WHERE CustomerName LIKE 'a_%_%'	Finds any values that starts with "a" and are at least 3 characters in length

--ne stava
update students set email = 'aaaa';
--NE STAVA 
update students set email = 'alpha@beta.';

--WHERE City LIKE '[!bsp]%';=WHERE City NOT LIKE '[bsp]%';  City NOT starting with "b", "s", or "p":
alter table students
add constraint ssn_valid check(len(ssn)=10 and ssn NOT LIKE '%[^0-9.]%');--ZNACHI DA BUDE TOCHNO OT TOZI VID-MEJDU 0 I 9
--NE STAVA
update students
set ssn='123';
--NE STAVA
update students
set ssn='903301222A';




-- в) създайте таблица за университетски курсове - уникален номер и име
--Реферираните атрибути от втората релация трябва да бъдат декларирани като UNIQUE
--или PRIMARY KEY ограничения. В противен случай те не могат да участват във FK декларация.zatova identity e primary key
create table courses(
    id int identity primary key,
	name varchar(50) not null
);

insert into courses(name) values('DB');
insert into courses(name) values('OOP');
insert into courses(name) values('Android');
insert into courses(name) values('iOS');
select * from courses;

-- всеки студент може да се запише в много курсове и във всеки курс
-- може да има записани много студенти.
-- При изтриване на даден курс автоматично да се отписват всички студенти от него.
create table StudentsIn
(
	student_fn int references students(fn),
	course_id int references courses(id) on delete cascade,
	primary key(student_fn, course_id)
);
insert into StudentsIn values(81888, 2);
insert into StudentsIn values(81888, 3);
insert into StudentsIn values(81888, 4);
select * from StudentsIn;

-- id-тата на всички курсове, в които се е записал студент 81888:
select course_id
from StudentsIn
where student_fn = 81888;
-- факултетните номера на всички студенти, записали се в курс с id=3 (Android):
select student_fn
from StudentsIn
where course_id = 3;

select * from courses
select * from StudentsIn;

select * from courses
join StudentsIn s on s.course_id=id

select * from students
join StudentsIn s on s.student_fn=fn

delete from courses
where name = 'iOS';
select * from StudentsIn;
-- виждаме, че вече няма студенти, записани в курс с id = 4 i iOS se trie ot courses

insert into courses(name) values('DIS');
insert into students
values(81200, 'MARC Ivanov', '9001012220', 'marcn@gmail.com', '1990-01-01', '2010-01-10');
insert into StudentsIn values(81200, 5);





-------------------------------------------------30april-6mai
Примери:
Следният изглед предоставя достъп до цялата информация за класовете кораби
произвеждани от САЩ
CREATE VIEW v_USA_classes
AS
SELECT *
FROM classes
WHERE country ='USA';

select * from classes where country='USA'
SELECT * FROM v_USA_classes


--Следващият изглед изкарва средния брой оръдия на произвежданите класове по старни:
CREATE VIEW v_Country_AvgGuns
AS
SELECT avg(numGuns) as average_Guns,country
FROM classes
GROUP BY country;

SELECT *
FROM v_Country_AvgGuns
ORDER BY average_Guns DESC

SELECT COUNTRY ,avg(numguns)
FROM CLASSES
GROUP BY COUNTRY ORDER BY avg(numguns) desc


--Информация за характеристиките на всеки кораб можем да получим посредством
--изгледа ships_full_info, дефиниран по следния начин:
CREATE VIEW v_ships_full_info
(name,type,numGuns,bore,displacement,country,launched)
AS
SELECT s.name, c.type,c.numGuns,c.bore,c.displacement,c.country,s.launched
FROM classes c,ships s
WHERE c.class=s.class

select * from classes c
join ships s on s.class=c.class

select * from v_ships_full_info


--1. Дефинирайте изглед наречен BritishShips, който дава за всеки британски кораб
неговият клас, тип, брой оръдия, калибър, водоизместимост и годината, в която е
пуснат на вода

create view a (class,type,numguns,bore,displacement,launched)
as
select c.class,c.type,c.numguns,c.bore,c.displacement,s.launched
from classes c, ships s
where c.class=s.class and c.country='Gt.Britain'

select * from classes c
join ships s on s.class=c.class
where c.country='Gt.Britain'

select * from a

-- i bez da pishem tzi v skobite pak sushtoto se poluchava
create view b 
as
select c.class,c.type,c.numguns,c.bore,c.displacement,s.launched
from classes c, ships s
where c.class=s.class and c.country='Gt.Britain'

--2Напишете заявка, която използва изгледа от предната задача, за да покаже броят
--оръдия и водоизместимост на британските бойни кораби, пуснати на вода преди 1919.
select numguns,displacement
from a
where launched<1919

--3Напищете съответната SQL заявка, реализираща задача 2, но без да използвате изглед.
select c.numguns,c.displacement
 from classes c
join ships s on s.class=c.class
where c.country='Gt.Britain' and launched<1919


--4



--5
create view sunk_ships
as
select *
from outcomes o, ships s
where o.ship=s.name and o.result='sunk'

select *
 from ships s
join outcomes o on o.ship=s.name
where o.result='sunk'

select * from sunk_ships

go

-- 5
create view SunkShips as
select battle, ship
from outcomes
where result = 'sunk';

go

select * from SunkShips;

--6. Въведете кораба California като потънал в битката при Guadalcanal чрез изгледа
от задача 5. За целта задайте подходяща стойност по премълчаване на колоната
result от таблицата Outcomes
--частично:
insert into SunkShips(battle, ship)
values('Guadalcanal', 'California');
-- горното ще мине, ако няма ограничение NOT NULL за колоната result в Outcomes
select * from outcomes where result is null;
-- в условието на задачата се иска да зададем DEFAULT стойност на колоната
-- result, но ние няма да го правим - ще видим по-хубав начин с тригери :)


--7. Създайте изглед за всички класове с поне 9 оръдия. Използвайте WITH CHECK
--OPTION. Опитайте се да промените през изгледа броя оръдия на класа Iowa
--последователно на 15 и 5.
go

create view ClassesWithAtLeast9Guns
as
select *
from classes
where numguns >= 9
with check option;--WITH CHECK OPTION - определя дали само редове достъпни за изгледа могат да бъдат вмъквани и променяни..
--ako imame with check option ne mogat da se promenqt broq orudiq na 5 t.k 5 <9
go

select * from ClassesWithAtLeast9Guns;

update ClassesWithAtLeast9Guns
set numguns = 5
where class = 'Iowa';
-- гръмна - така трябваше; с 15 ще мине


--8. Променете изгледа от задача 7, така че броят оръдия да може да се променя без ограничения
- drop, после create без with check option

--9. Създайте изглед с имената на битките, в които са участвали поне 3 кораба с под 9
оръдия и от тях поне един е бил увреден.

create view v
select o.battle
from ships s, classes c ,outcomes o
where o.ship=s.name and c.class=s.class




select * 
from ships s
join classes c on c.class=s.class
join outcomes o on o.ship=s.name
where numguns <9 

-----------------------------------         14-20 mai TRIGERI
------14-20 mai
-- 1. Да се направи така, че при добавяне
-- на нов клас автоматично да се добавя и
-- нов кораб със същото име и с година на
-- пускане на вода = null.
use ships;
go
create trigger t1
on classes
after insert--sled kato dobavim (insert-nem) nov klas v primera 'Test'
as
	insert into ships(name, class)--dobavq se korab s ime=imeto na klasa t.e 'Test'
	select class, class
	from inserted;

-- тестване:
insert into classes
values('Test', 'bb', 'Bulgaria', 14, 20, 80000);
select * from ships where name = 'Test';
drop trigger t1;

select * from ships
select * from classes


-- 2. При изтриване на кораб автоматично да се изтрива и неговият клас, ако
-- няма повече кораби от този клас.
-- Забележка: ако преди това е имало класове без кораби - да не се пипат!
-- Забележка: клас без кораби може да се получи и при update
go

create trigger t2
on ships
after delete
as
	delete from classes
	where class in (select class
					from deleted
					where class not in (select class
										from ships));
-- Забележка: ако не използвахме deleted,
-- а направо ships, щяхме да изтрием и 
-- класове, които са били празни и преди
-- съответния delete

-- тестване:
-- в предишната задача вече сме добавили нов клас и нов кораб, ще използваме тях
delete from ships
where name = 'Test';
select * 
from classes
where class = 'Test';
drop trigger t2;
go

-- леко - искаме при изтриване на клас да се изтриват и 
-- всички кораби - ами може с on delete cascade


-- 3. Да се направи така, че ако при 
-- добавяне или обновяване на кораб
-- годината му на пускане е по-голяма от 
-- текущата година, то годината му да бъде
-- променена на null. (това е задача 3-А от 12.exerciseTriggers.pdf)
-- в MSSQL няма BEFORE тригери, затова ще търсим друг начин
create trigger t3
on ships
after insert, update
as
	update ships
	set launched = null
	where name in (select name
					from inserted
					where launched > year(getdate()));
-- тестване:
insert into ships values('Test','Iowa',2250);
select * from ships where name='Test';
delete from ships where name='Test';
drop trigger t3;
go
-- горното решение ще гръмне, ако има check(launched <= year(getdate()) в ships!

-- ако трябва в тялото на тригер да разграничим дали е бил извикан при insert или при update,
-- можем да проверим if exists (select * from deleted)

-- ако беше само за insert, можеше да направим instead of insert и всичко щеше да е наред
create trigger t
on ships
instead of insert
as
insert into ships(name, class, launched)
select name, class, case 
			when launched > year(getdate()) then null 
			else launched 
			end
from inserted;
-- вариант без case: 
-- insert into ships 
-- select * from inserted where launched <= year(getdate())
-- union all
-- select name, class, null from inserted where launched > year(getdate());
drop trigger t;
go

-- 4. При промяна на черно-бял филм на цветен съответният продуцент да получава $100000.
-- Ако в една UPDATE заявка са били променени няколко филма на един продуцент, той да получи 
-- само веднъж 100000.

create trigger t4
on movie
after update
as
	update movieexec
	set networth = networth + 100000
	where cert# in (select i.producerc#
					from deleted d--deleted sa starite stoinosti predi update-vaneto
					join inserted i on d.title = i.title and d.year = i.year--i-novite stoinosti
					where d.inColor = 'n' and i.inColor = 'y');

--primer 
update movie
set incolor='Y'
where length=116
select * 
from movieexec me 
join movie m on m.PRODUCERC#=me.CERT#


update movie m
join movieexec me  on m.PRODUCERC#=me.CERT#
set incolor='N',networth=200000000
where length=116

drop trigger t4;


-- Следващият пример е за валидация на данни. Всички задачи от такъв тип може да се решат аналогично.

-- 5. Да не се допуска добавянето на ред
-- в OUTCOMES, който да указва, че даден
-- кораб е участвал в битка, преди да бъде
-- пуснат на вода.

-- Aко се добавят няколко реда и поне един от тях нарушава условието за коректност, 
-- цялата операция ще бъде отменена.
use ships;
go

create trigger t5
on outcomes
after insert
as
	if exists (select *
				from inserted--dobavili sme nov outcome
				join ships on ship = ships.name
				join battles on battle = battles.name
				where launched > year(battles.date))
	begin
		raiserror('Error: ship is launched after the battle', 16, 10); -- има само едно "е"
		rollback;
	end;

-- проверка:
insert into outcomes(ship, battle, result) 
values('Iowa', 'North Atlantic', 'sunk');

select * from outcomes
where ship='Iowa';

select b.name,s.name,s.launched 
from battles b
join outcomes o on b.NAME=o.BATTLE
JOIN SHIPS S ON S.NAME=o.SHIP
select * from ships

drop trigger t5;
go


-- С помощта на INSTEAD OF тригерите може да се изпълняват INSERT, UPDATE и DELETE заявки върху всеки изглед.
-- 6. Да се създаде изглед за всички
-- потънали кораби (име на кораб и битка), т.е. за всеки 
-- потънал кораб да казва в коя битка е потънал,
-- който да позволява insert, update, delete.

create view SunkShips
as
select ship, battle
from outcomes
where result = 'sunk';
go

-- UPDATE и DELETE могат да се изпълнят безпроблемно,
-- но при INSERT новият ред би имал result = null, което не ни върши работа.

create trigger t6
on SunkShips
instead of insert
as
	insert into outcomes(ship, battle, result)
	select ship, battle, 'sunk'
	from inserted;

drop trigger t6;

insert into SunkShips(battle,ship) values ("eee","greg")
select * from SunkShips
select * from outcomes where result='sunk'


-- 7. -- Симулиране на ON DELETE SET NULLS
-- MS SQL не поддържа ON DELETE SET NULLS. Да се реализира с 
-- тригери за външния ключ movie.producerc#
go
use movies;
go

create trigger t
on movieexec
instead of delete --не може after trigger заради FK; 
-- в други СУБД има before тригери
as
begin
	update movie
	set producerc# = null
	where producerc# in (select cert# from deleted);

	-- следващата операция е тази, която по принцип щеше да се изпълни и без тригер
	delete from movieexec
	where cert# in (select cert# from deleted);
end;

-- ако имаме INSTEAD OF INSERT и искаме да изпълним INSERT заявката, която е била предвидена:
-- INSERT INTO <table>
-- SELECT * FROM INSERTED;

go
 
--------------------          12.exerciseTriggers.pdf
-- Зад. 1. Да се напише тригер за таблицата MovieExec, който не позволява 
-- средната стойност на Networth да е по-малка от 500 000 (ако при промени в 
-- таблицата тази стойност стане по-малка от 500 000, промените да бъдат 
-- отхвърлени).

create trigger t
on movieexec
after insert, update, delete
as
	if (select AVG(networth)
		from movieexec) < 500000
	begin
		raiserror('Error: Average networth cannot be < 500000', 16, 10);
		rollback;
	end;


--2А) При промяна на цената на някой компютър се уверете, че няма компютър с по-ниска цена и
същата честота на процесора;
create trigger t7
on pc
after update
as
--if((price in (select price from updated)) > (select min(price) from deleted ))
if exists (select price from pc where price < (select price from inserted))
begin
		raiserror('Not min', 16, 10);
		rollback;
	end;

	drop trigger t7

select * from pc order by price
--PRIMER -nqma da stane t.k imame pc-ta s price 370 > 350
update pc
set price=370
where code =8

select min(price) from pc


-- 2 Б) Никой производител на компютри не може да произвежда и принтери;
create trigger t8
on product
after insert,update 
as
if exists(select * 
             from product p1
			    join product p2 on p1.maker=p2.maker
				  where p1.type = 'PC' and p2.type = 'Printer')
begin 
raiseerror("exists",16,10);
rollback;
end;

select * 
from product p1
 join product p2 on p1.maker=p2.maker


 --2В) Всеки производител на компютър трябва да произвежда и лаптоп, който да има същата или
по-висока честота на процесора;


-- 2 Г) При променяне на данните в таблицата Laptop се уверете, че средната 
-- цена на лаптопите за всеки производител е поне 2000;
create trigger t
on laptop
after update
as
if exists  (select maker
			from laptop
			join Product on laptop.model = Product.model
			group by maker
			having AVG(price) < 2000)
begin
	raiserror('...', 16, 10);
	rollback;
end;
select maker, avg(price)
from product p
join laptop l on l.model=p.model
group by maker


select maker, avg(price)
from product p
join laptop l on l.model=p.model
group by maker
having avg(price) >1000--B

-- 2 Д) Д) При обновяване на RAM или HD полетата на даден компютър се уверете, че твърдия диск е
--поне 100 пъти по-голям от паметта;- по-добре с CHECK
create trigger t8
on pc
after update
as
if exists (select * from inserted i
          where i.hd<i.ram)
begin
	raiserror('.lala', 16, 10);
	rollback;
end;
	drop trigger t8
select * from pc 
--primer
update pc
set ram=ram+1
where model=1232

