--9-15 april

--1
insert into moviestar(name, gender, birthdate)
values('Nicole Kidman', 'F', '1967-06-20');

-- трябва да проверим какво е станало, например:
select * from moviestar;
delete from MOVIESTAR where name='Nicole Kidman'
select * from moviestar;


--2
select * from MOVIEEXEC;
delete from MOVIEEXEC where NETWORTH < 1000000--0 rows affected
select * from MOVIEEXEC;

--<112 000 000 mahat se tezi < 112 000 000
select * from MOVIEEXEC;
delete from MOVIEEXEC where NETWORTH < 112000000--0 rows affected
select * from MOVIEEXEC;


--3
begin transaction; -- изпълняваме този ред (F5)
-- пишем си заявките и си ги изпълняваме по познатия начин (F5, F5...)
delete from MOVIESTAR
where address is null;
-- накрая пишем:
rollback transaction;

--PRIMER
select * from MOVIESTAR;--natiskam go predi i sled kaato delete-na imeto kakto i sled rollback transaction
begin transaction; -- изпълняваме този ред (F5)
-- пишем си заявките и си ги изпълняваме по познатия начин (F5, F5...)
delete from MOVIESTAR
where name='Jane Fonda'
-- накрая пишем:
rollback transaction;--F5 vuzstanovqva si go kakto e bilo

--4
select * from product,pc order by maker 
begin transaction; 
insert into product(maker,model,type)
values('C', '1100', 'PC');
insert into pc(code, model, speed, ram, hd, cd, price)
VALUES(12, '1100', 2400, 2048, 500, '52x', 299);
--rollback transaction;
--select * from product,pc order by maker 

--5 TRIE TOVA KOETO SME NAPRAVILI V 4TA
select * from pc order by model
select * from product order by model
delete from pc where model='1100';
delete from product where model='1100';

--6
select * from product order by model
select * from product order by maker
begin transaction; 
insert into product (model, maker, type)
select distinct model, 'Z', 'Laptop' from pc;--distinct model shte nareche model razlichen ot tezi na laptopite dosega
rollback transaction;

select * from laptop
begin transaction; 
insert into laptop(code, model, speed, ram, hd, price, screen)
select code+100, model, speed, ram, hd, price+500, 15
from pc;
rollback transaction;

--7
--pokazva laptopite chiito proizvedtiel ne e i proizveditel na printer-tehnite kodove sa 2 i 3
select * from laptop l 
where l.model in (select model from product where type='Laptop'
  and maker not in (select maker from product where type='Printer'))

begin transaction; 
delete from laptop
where model in(select model from product where type='Laptop'
 and maker not in (select maker from product where type='Printer'))
 rollback transaction;

 select * from laptop



 --8
delete from product where maker='Z'

select * from product order by maker
begin transaction; 
update product
set maker= 'A' where maker= 'B'
rollback transaction;

--9
select * from pc
begin transaction; 
update pc
set price=price/2,hd=hd+20
rollback transaction;


--10
--laptopi chiito maker-i sa B
select * from laptop where model in (select model from PRODUCT where maker='B')

begin transaction; 
update laptop
set screen=screen+1 where model in (select model from PRODUCT where maker='B')
rollback transaction;


--11
select *from ships s
join classes c on c.CLASS=s.CLASS
begin transaction;
insert into classes
values('Nelson', 'bb', 'Gt.Britain', 9, 16, 34000);

insert into ships
values('Nelson', 'Nelson', 1927);

insert into ships
values('Rodney', 'Nelson', 1927);

rollback transaction;


--12
select * from ships s
join OUTCOMES o on s.NAME=o.SHIP
begin transaction;
delete from ships
where name in (select ship from OUTCOMES where result='sunk')
rollback transaction;


--13
select * from CLASSES
begin transaction;
update classes
set bore=bore*2.54, displacement=displacement/1.1;
rollback transaction;


--14
select * from ships

select class ,count(*)
from ships
group by CLASS

select class ,count(*)
from ships
group by CLASS
having count(*)>3

--pokazva broevete na klasovete
select class,count(*)
from CLASSES
group by CLASS

--zadachata
begin transaction;
delete from classes
where class NOT in
(select class
from ships
group by class
having count(*) >= 3);
rollback transaction;

delete from classes where class in
(select classes.class 
from classes
left join ships on classes.class=ships.class
group by classes.class
having count(name)<3);


--15
select *from classes 

begin transaction;
update CLASSES
set bore=(select bore from CLASSES where class='Bismarck'),
DISPLACEMENT=(select DISPLACEMENT from CLASSES where class='Bismarck') where class ='Iowa'
rollback transaction;




-------16-22
CREATE DATABASE test
GO
USE test
GO

 create table product(
 maker char(1),
 model char(4), 
 type varchar(7));

 create table printer(
 code int ,
 model char(4),
 color char(1) default 'n', 
 price decimal(10,2));

 --float(M,D) this keeping in mind here M=max. no. of digit allowed(range 1 to 65), D=no. of digits after 
 --the decimal point. so cany you change it float(5,2). so float(2,2) does not satisfiy your need to enter no.10

 create table classes(
 class varchar(50),
 type char(2)
 );

 --2
  insert into Printer(code,model) 
  values(10,'1234');
  SELECT * FROM PRINTER

   insert into product
  values('A','1234','printer');
    SELECT * FROM product
	
   insert into classes
  values('Item','bb');
    SELECT * FROM classes


 --3
 alter table classes add bore float
 SELECT * FROM classes
--4
alter table printer drop column price

--5
DROP TABLE classes;
DROP TABLE printer;
DROP TABLE product;


--6
USE master
GO
DROP DATABASE test
GO



------- 23-29 april

create database deleteme
go
use deleteme
go
-- допълнение към материала: autoincrementing primary key
create table test1
(
	id int identity primary key,
	name nvarchar(50)
);

insert into test1(name) values('Test'); -- даваме стойност за всички колони, но без id
insert into test1(name) values('Second Test');
select * from test1;

delete from test1 where id = 2;
insert into test1(name) values('Third Test');--id-tata veche sa 1 i 3
select * from test1;

--1
select * from movie--empire stikes back e 11 minuti
alter table movie
add constraint u2 unique(studioName, length);

insert into movie(title, year, length, incolor, studioName, producerc#)
values('Fail', 2012, 111, 'N', 'Fox', 123);
-- горната заявка няма да тръгне, ако вече има филм на Фокс с дължина 111 минути

alter table movie
drop constraint u2;

delete from movie
where title='Fail'

--3
create table students
(
	fn int primary key check (fn between 0 and 99999),
	name nvarchar(100) not null, -- допълнителен материал: в MSSQL се използва NVARCHAR за поддръжка на UNICODE символи
	ssn char(10) unique not null,
	email varchar(100) unique not null,
	birthdate date not null,
	adate date not null,
	constraint at_least_18_yrs check(datediff(year, birthdate, adate) >= 18)
);
--TIMESTAMPDIFF(unit,datetime_expr1,datetime_expr2)-Returns datetime_expr2 – datetime_expr.The unit for the result (an integer) is given by the unit argument.
--The unit argument can be:  MICROSECOND (microseconds), SECOND, MINUTE, HOUR, DAY, WEEK, MONTH, QUARTER, or YEAR.

insert into students
values(81888, 'Ivan Ivanov', '9001012222', 'ivan@gmail.com', '1990-01-01', '2009-01-10');
select * from students;

insert into students
values(81888, 'Petar Petrov', '9033012222', 'petar@gmail.com', '1990-01-01', '2003-01-10');--ne stava t.k godinite < 18

--NE STAVA TAKA, T.K Column CHECK constraint for column 'adate' references another column, table 'students2'.
create table students2
(
	fn int primary key check (fn between 0 and 99999),
	name nvarchar(100) not null, -- допълнителен материал: в MSSQL се използва NVARCHAR за поддръжка на UNICODE символи
	ssn char(10) unique not null,
	email varchar(100) unique not null,
	birthdate date not null,
	adate date not null check(datediff(year, birthdate, adate) >= 18),
	--constraint at_least_18_yrs check(datediff(year, birthdate, adate) >= 18)
);

--% - The percent sign represents zero, one, or multiple characters- A WILDCARD
-- _ - The underscore represents a single character
select * from students;
--b
alter table students
add constraint email_valid check(email like '%_@%_.%_');--polzvame _ za da ima e pone 3 znaka e.g a@b.c
-- ima pone 3 bukvi sled dadenite znaci, a ne moje alpha@beta. i da nqma nishto sled .
--WHERE CustomerName LIKE 'a_%_%'	Finds any values that starts with "a" and are at least 3 characters in length

--ne stava
update students set email = 'aaaa';
--NE STAVA 
update students set email = 'alpha@beta.';

--WHERE City LIKE '[!bsp]%';=WHERE City NOT LIKE '[bsp]%';  City NOT starting with "b", "s", or "p":
alter table students
add constraint ssn_valid check(len(ssn)=10 and ssn NOT LIKE '%[^0-9.]%');--ZNACHI DA BUDE TOCHNO OT TOZI VID-MEJDU 0 I 9
--NE STAVA
update students
set ssn='123';
--NE STAVA
update students
set ssn='903301222A';



--C
--Реферираните атрибути от втората релация трябва да бъдат декларирани като UNIQUE
--или PRIMARY KEY ограничения. В противен случай те не могат да участват във FK декларация.zatova identity e primary key
create table courses(
    id int identity primary key,
	name varchar(50) not null
);

insert into courses(name) values('DB');
insert into courses(name) values('OOP');
insert into courses(name) values('Android');
insert into courses(name) values('iOS');
select * from courses;


create table StudentsIn
(
	student_fn int references students(fn),
	course_id int references courses(id) on delete cascade,
	primary key(student_fn, course_id)
);
insert into StudentsIn values(81888, 2);
insert into StudentsIn values(81888, 3);
insert into StudentsIn values(81888, 4);
select * from StudentsIn;

-- id-тата на всички курсове, в които се е записал студент 81888:
select course_id
from StudentsIn
where student_fn = 81888;
-- факултетните номера на всички студенти, записали се в курс с id=3 (Android):
select student_fn
from StudentsIn
where course_id = 3;

select * from courses
select * from StudentsIn;

select * from courses
join StudentsIn s on s.course_id=id

select * from students
join StudentsIn s on s.student_fn=fn

delete from courses
where name = 'iOS';
select * from StudentsIn;
-- виждаме, че вече няма студенти, записани в курс с id = 4 i iOS se trie ot courses

insert into courses(name) values('DIS');
insert into students
values(81200, 'MARC Ivanov', '9001012220', 'marcn@gmail.com', '1990-01-01', '2010-01-10');
insert into StudentsIn values(81200, 5);

