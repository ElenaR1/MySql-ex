--3
а) За всеки студент се съхранява следната информация:
-- фак. номер - от 0 до 99999, първичен ключ;
-- име - до 100 символа;
-- ЕГН - точно 10 символа, уникално;
-- e-mail - до 100 символа, уникален;
-- рождена дата;
-- дата на приемане в университета - трябва да бъде поне 18 години след рождената;
-- за всички атрибути задължително трябва да има зададена стойност (не може NULL)
create table students
(
	fn int primary key check (fn between 0 and 99999),
	name nvarchar(100) not null, -- допълнителен материал: в MSSQL се използва NVARCHAR за поддръжка на UNICODE символи
	ssn char(10) unique not null,
	email varchar(100) unique not null,
	birthdate date not null,
	adate date not null,
	constraint at_least_18_yrs check(datediff(year, birthdate, adate) >= 18)
);



-- в) създайте таблица за университетски курсове - уникален номер и име
--Реферираните атрибути от втората релация трябва да бъдат декларирани като UNIQUE
--или PRIMARY KEY ограничения. В противен случай те не могат да участват във FK декларация.zatova identity e primary key
create table courses(
    id int identity primary key,
	name varchar(50) not null
);

insert into courses(name) values('DB');
insert into courses(name) values('OOP');
insert into courses(name) values('Android');
insert into courses(name) values('iOS');
select * from courses;

-- всеки студент може да се запише в много курсове и във всеки курс
-- може да има записани много студенти.
-- При изтриване на даден курс автоматично да се отписват всички студенти от него.
create table StudentsIn
(
	student_fn int references students(fn),
	course_id int references courses(id) on delete cascade,
	primary key(student_fn, course_id)
);
ins


-----30.04-6.05
--1. Дефинирайте изглед наречен BritishShips, който дава за всеки британски кораб
неговият клас, тип, брой оръдия, калибър, водоизместимост и годината, в която е
пуснат на вода

create view a (class,type,numguns,bore,displacement,launched)
as
select c.class,c.type,c.numguns,c.bore,c.displacement,s.launched
from classes c, ships s
where c.class=s.class and c.country='Gt.Britain'

select * from classes c
join ships s on s.class=c.class
where c.country='Gt.Britain'

-- най-дългият филм (ако са повече от един, да се
-- изведат всички):
-- грешно:
select *
from movie
where length = max(length);
-- вярно:
select *
from movie
 
select *
from movie

--5
create view sunk_ships
as
select *
from outcomes o, ships s
where o.ship=s.name and o.result='sunk'
where length = (select max(length) from movie)
