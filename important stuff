--6-- За всеки персонален компютър се продава и 15-инчов лаптоп със същите параметри,
-- но с $500 по-скъп. Кодът на такъв лаптоп е със 100 по-голям от кода на съответния
-- компютър. Добавете тази информация в базата.
select * from product order by model
select * from product order by maker
begin transaction; 
insert into product (model, maker, type)
select distinct model, 'Z', 'Laptop' from pc;--distinct model shte nareche model razlichen ot tezi na laptopite dosega
rollback transaction;

select * from laptop
begin transaction; 
insert into laptop(code, model, speed, ram, hd, price, screen)
select code+100, model, speed, ram, hd, price+500, 15
from pc;
rollback transaction;

--7-- Да се изтрият всички лаптопи, направени от производител, който не
-- произвежда принтери.
-- Упътване: Мислете си, че решавате задача от познат тип - "Да се
-- изведат всички лаптопи, ...". Накрая ще е нужна съвсем малка
-- промяна. Ако започнете директно да триете, много е вероятно при
-- някой грешен опит да изтриете всички лаптопи и ще трябва често да
-- възстановявате таблицата или да работите на сляпо.
--pokazva laptopite chiito proizvedtiel ne e i proizveditel na printer-tehnite kodove sa 2 i 3
select * from laptop l 
where l.model in (select model from product where type='Laptop'
  and maker not in (select maker from product where type='Printer'))

begin transaction; 
delete from laptop
where model in(select model from product where type='Laptop'
 and maker not in (select maker from product where type='Printer'))
 rollback transaction;


--14-- Изтрийте всички класове, от които има по-малко от три кораба.
-- заб.: може да има класове без кораби
select * from ships

--pokazva broevete na korbaite ot daden klas
select class ,count(*)
from ships
group by CLASS

select class ,count(*)
from ships
group by CLASS
having count(*)>3


--zadachata
begin transaction;
delete from classes
where class NOT in
(select class
from ships
group by class
having count(*) >= 3);
rollback transaction;


--15 Променете калибъра на оръдията и водоизместимостта на класа 
--Iowa, така че да са същите като тези на класа Bismarck
select *from classes 

begin transaction;
update CLASSES
set bore=(select bore from CLASSES where class='Bismarck'),
DISPLACEMENT=(select DISPLACEMENT from CLASSES where class='Bismarck') where class ='Iowa'
rollback transaction;
------------------
16-22 april
 --3 Добавете към Classes атрибут bore - число с плаваща запетая.
 alter table classes add bore float
 SELECT * FROM classes
--4Напишете заявка, която премахва атрибута price от Printer.
alter table printer drop column price
--5 Изтрийте всички таблици, които сте създали в това упражнение.

DROP TABLE classes;
DROP TABLE printer;
DROP TABLE product;


--6Накрая изтрийте и самата база. За целта трябва да укажем друга база да бъде текуща, понеже не можем да изтрием текущата база.
USE master
GO
DROP DATABASE test
GO

--------------------------------
--3
а) За всеки студент се съхранява следната информация:
-- фак. номер - от 0 до 99999, първичен ключ;
-- име - до 100 символа;
-- ЕГН - точно 10 символа, уникално;
-- e-mail - до 100 символа, уникален;
-- рождена дата;
-- дата на приемане в университета - трябва да бъде поне 18 години след рождената;
-- за всички атрибути задължително трябва да има зададена стойност (не може NULL)
create table students
(
	fn int primary key check (fn between 0 and 99999),
	name nvarchar(100) not null, -- допълнителен материал: в MSSQL се използва NVARCHAR за поддръжка на UNICODE символи
	ssn char(10) unique not null,
	email varchar(100) unique not null,
	birthdate date not null,
	adate date not null,
	constraint at_least_18_yrs check(datediff(year, birthdate, adate) >= 18)
);



-- в) създайте таблица за университетски курсове - уникален номер и име
--Реферираните атрибути от втората релация трябва да бъдат декларирани като UNIQUE
--или PRIMARY KEY ограничения. В противен случай те не могат да участват във FK декларация.zatova identity e primary key
create table courses(
    id int identity primary key,
	name varchar(50) not null
);

insert into courses(name) values('DB');
insert into courses(name) values('OOP');
insert into courses(name) values('Android');
insert into courses(name) values('iOS');
select * from courses;

-- всеки студент може да се запише в много курсове и във всеки курс
-- може да има записани много студенти.
-- При изтриване на даден курс автоматично да се отписват всички студенти от него.
create table StudentsIn
(
	student_fn int references students(fn),
	course_id int references courses(id) on delete cascade,
	primary key(student_fn, course_id)
);
ins


-----30.04-6.05
--1. Дефинирайте изглед наречен BritishShips, който дава за всеки британски кораб
неговият клас, тип, брой оръдия, калибър, водоизместимост и годината, в която е
пуснат на вода

create view a (class,type,numguns,bore,displacement,launched)
as
select c.class,c.type,c.numguns,c.bore,c.displacement,s.launched
from classes c, ships s
where c.class=s.class and c.country='Gt.Britain'

select * from classes c
join ships s on s.class=c.class
where c.country='Gt.Britain'

-- най-дългият филм (ако са повече от един, да се
-- изведат всички):
-- грешно:
select *
from movie
where length = max(length);
-- вярно:
select *
from movie
 
select *
from movie

--5
create view sunk_ships
as
select *
from outcomes o, ships s
where o.ship=s.name and o.result='sunk'
where length = (select max(length) from movie)
